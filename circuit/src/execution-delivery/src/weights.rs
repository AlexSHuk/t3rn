//! Autogenerated weights for pallet_circuit_execution_delivery
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-09-24, STEPS: `[50, ]`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// ./target/release/circuit
// benchmark
// --chain
// dev
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// pallet_circuit_execution_delivery
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --raw
// --template=../benchmarking/frame-weight-template.hbs
// --output
// ./src/execution-delivery/src/weights.rs


#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_circuit_execution_delivery.
pub trait WeightInfo {
	fn decompose_io_schedule() -> Weight;
	fn register_gateway_default_polka() -> Weight;
	fn register_gateway_polka_u64() -> Weight;
	fn register_gateway_default_eth() -> Weight;
	fn register_gateway_eth_u64() -> Weight;
	fn dry_run_whole_xtx_one_component() -> Weight;
	fn dry_run_whole_xtx_three_components() -> Weight;
}

/// Weights for pallet_circuit_execution_delivery using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn decompose_io_schedule() -> Weight {
		(7_011_000 as Weight)
	}
	fn register_gateway_default_polka() -> Weight {
		(68_200_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	fn register_gateway_polka_u64() -> Weight {
		(67_902_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	fn register_gateway_default_eth() -> Weight {
		(67_631_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	fn register_gateway_eth_u64() -> Weight {
		(67_656_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	fn dry_run_whole_xtx_one_component() -> Weight {
		(14_162_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn dry_run_whole_xtx_three_components() -> Weight {
		(14_767_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn decompose_io_schedule() -> Weight {
		(7_011_000 as Weight)
	}
	fn register_gateway_default_polka() -> Weight {
		(68_200_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
	}
	fn register_gateway_polka_u64() -> Weight {
		(67_902_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
	}
	fn register_gateway_default_eth() -> Weight {
		(67_631_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
	}
	fn register_gateway_eth_u64() -> Weight {
		(67_656_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
	}
	fn dry_run_whole_xtx_one_component() -> Weight {
		(14_162_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn dry_run_whole_xtx_three_components() -> Weight {
		(14_767_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
}